---
import resume from "@data/resume.json";
import { getLink } from "@utils/links.js";
import Icon from "@components/common/Icon.astro";

// If you're passing any props to the component
interface Props {
  color?: boolean;
  size?: string;
  extraClasses?: string;
  linkClasses?: string; // Additional classes for the links
  iconClasses?: string; // Additional classes for the icons
  labelClasses?: string; // Additional classes for the labels
  labels?: boolean; // If true, only icons will be displayed
}

const {
  extraClasses = "",
  linkClasses = "",
  iconClasses = "",
  labelClasses = "",
  size = "md",
  color = false,
  labels = false,
} = Astro.props;

// // Generate color classes if color is enabled
// const colorClasses = color
//   ? {
//       linkedin:
//         "text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300",
//       github:
//         "text-gray-800 hover:text-black dark:text-gray-300 dark:hover:text-white",
//       twitter:
//         "text-sky-500 hover:text-sky-600 dark:text-sky-400 dark:hover:text-sky-300",
//       instagram:
//         "text-pink-600 hover:text-pink-700 dark:text-pink-400 dark:hover:text-pink-300",
//       email:
//         "text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300",
//       website:
//         "text-green-600 hover:text-green-700 dark:text-green-400 dark:hover:text-green-300",
//       letterboxd:
//         "text-orange-500 hover:text-orange-600 dark:text-orange-400 dark:hover:text-orange-300",
//     }
//   : {};

// social links configuration
const socialLinks = [
  {
    name: "LinkedIn",
    iconName: "linkedin",
    link: getLink(resume.contact.links, "LinkedIn"),
    variant: color ? "color" : "mono",
  },
  {
    name: "GitHub",
    iconName: "github",
    link: getLink(resume.contact.links, "GitHub"),
    variant: "default",
  },
  {
    name: "Twitter",
    iconName: "twitter",
    link: getLink(resume.contact.links, "Twitter"),
    variant: color ? "color" : "mono",
  },
  {
    name: "Instagram",
    iconName: "instagram",
    link: getLink(resume.contact.links, "Instagram"),
    variant: color ? "color" : "mono",
  },
  {
    name: "Email",
    iconName: "email",
    link: `mailto:${resume.contact.email}`,
    variant: "default",
    classes: color ? "text-ln-primary-1" : "",
  },
  {
    name: "Website",
    iconName: "hedgehog",
    link: getLink(resume.contact.links, "Website"),
    variant: color ? "color" : "default",
  },
  {
    name: "Letterboxd",
    iconName: "letterboxd",
    link: getLink(resume.contact.links, "Letterboxd"),
    variant: color ? "default" : "mono",
  },
];
---

<!-- <div
  class={`social-links flex justify-center flex-wrap gap-1 font-sans ${extraClasses}`}
>
  {
    socialLinks.map((link) => (
      <a
        href={link.link}
        title={link.name}
        target="_blank"
        rel="noopener noreferrer"
        aria-label={link.name}
        class:list={[
          "social-link",
          labels
            ? "flex flex-col items-center"
            : "inline-flex items-center justify-center",
          "rounded-md",
          // "hover:bg-sf-3",
          "transition-colors",
          "p-0",
          link.colorClass,
          linkClasses,
        ]}
      >
        <i
          class:list={[
            link.icon,
            "social-icon",
            "flex justify-center items-center",
            sizeClasses,
            iconClasses,
          ]}
        />
        {labels && (
          <span class={`text-sm text-center ${labelClasses}`}>{link.name}</span>
        )}
      </a>
    ))
  }
</div> -->
<div
  class={`social-links flex justify-center flex-wrap gap-2 font-sans ${extraClasses}`}
>
  {
    socialLinks.map((link) => (
      <a
        href={link.link}
        title={link.name}
        target="_blank"
        rel="noopener noreferrer"
        aria-label={link.name}
        class:list={[
          "social-link",
          labels
            ? "flex flex-col items-center"
            : "inline-flex items-center justify-center",
          "rounded-md",
          // "hover:bg-sf-3",
          "transition-colors",
          "px-1",
          link.classes || "",
          linkClasses,
        ]}
      >
        <Icon
          name={link.iconName as any}
          size={size}
          variant={link.variant}
          class:list={[iconClasses]}
        />
        {labels && (
          <span class={`text-sm text-center ${labelClasses}`}>{link.name}</span>
        )}
      </a>
    ))
  }
</div>
