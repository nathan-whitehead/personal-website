---
import BaseLayout from "@layouts/base.astro";
import SocialLinks from "@components/social-links.astro";

// You can add any other imports or variables you need here
const title = "Contact";
---

<BaseLayout title={title}>
  <div class="max-w-2xl mx-auto px-4 py-8">
    <div class="text-center mb-8">
      <h1 class="text-4xl font-bold mb-4">Contact Me</h1>
      <p class="text-xl mb-6">
        If you have any questions or would like to get in touch, feel free to
        reach out!
      </p>
      <SocialLinks size="lg" color labels linkClasses="hover:bg-sf-2" />
    </div>

    <div class="bg-sf-2 rounded-lg shadow-md p-6 mb-8">
      <div class="font-sans">
        <h2 class="text-2xl font-bold mb-6 text-center">Get in Touch</h2>

        <!-- Success message -->
        <div
          id="success-message"
          class="hidden bg-icn-success-1 border border-ln-success-1 text-ln-light-1 px-4 py-2 rounded mb-6"
        >
          <p class="font-medium">Message sent successfully!</p>
          <p>Thank you for reaching out. I'll get back to you soon.</p>
        </div>

        <!-- Error message -->
        <div
          id="error-message"
          class="hidden bg-icn-danger-1 border border-ln-danger-1 text-ln-light-1 px-4 py-2 rounded mb-6 relative"
        >
          <div class="pr-8">
            <!-- Add padding-right to make space for the button -->
            <p class="font-medium">Error sending message</p>
            <p id="error-details">
              There was an issue sending your message. Please try again later,
              or send me an email.
            </p>
          </div>
          <button
            id="close-error"
            class="absolute top-2 right-2 p-1 text-ln-danger-1 hover:text-ln-danger-2 transition-colors"
            aria-label="Close error message"
          >
            <span class="material-symbols-outlined"> close </span>
          </button>
        </div>

        <form
          id="contact-form"
          method="POST"
          class="needs-validation"
          novalidate
        >
          <div class="grid md:grid-cols-2 gap-6 mb-6">
            <div class="space-y-2">
              <label for="name" class="block font-medium"
                >Name<span class="text-ln-danger-1">*</span></label
              >
              <input
                type="text"
                id="name"
                name="name"
                required
                class:list={[
                  "w-full px-4 py-2 rounded border border-bd-1",
                  "bg-sf-1",
                  "focus:outline-none focus:ring-2 focus:ring-ln-primary-1",
                ]}
              />
              <div class="hidden error-message text-ln-danger-1 text-sm">
                Please enter your name.
              </div>
            </div>

            <div class="space-y-2">
              <label for="email" class="block font-medium"
                >Email<span class="text-ln-danger-1">*</span></label
              >
              <input
                type="email"
                id="email"
                name="email"
                required
                class:list={[
                  "w-full px-4 py-2 rounded border border-bd-1",
                  "bg-sf-1",
                  "focus:outline-none focus:ring-2 focus:ring-ln-primary-1",
                ]}
              />
              <div class="hidden error-message text-ln-danger-1 text-sm">
                Please provide a valid email address.
              </div>
            </div>
          </div>

          <div class="space-y-2 mb-6">
            <label for="message" class="block font-medium"
              >Message<span class="text-ln-danger-1">*</span></label
            >
            <textarea
              id="message"
              name="message"
              rows="4"
              required
              class:list={[
                "w-full px-4 py-2 rounded border border-bd-1",
                "bg-sf-1",
                "focus:outline-none focus:ring-2 focus:ring-ln-primary-1",
              ]}></textarea>
            <div class="hidden error-message text-ln-danger-1 text-sm">
              Please enter your message.
            </div>
          </div>

          <div class="space-y-2 mb-6">
            <div class="flex items-start">
              <input
                type="checkbox"
                id="privacy-consent"
                name="privacy-consent"
                required
                class="mt-1 mr-1 w-[2rem] h-[2rem] border border-bd-1
                       rounded focus:ring-2 focus:ring-ln-primary-1 focus:outline-none &:checked:bg-icn-primary-1
                       transition-colors"
              />
              <label for="privacy-consent" class="text-sm">
                I understand that by submitting this form, the information I've
                provided may be used to contact me.
                <span class="text-ln-danger-1">*</span>
              </label>
            </div>
            <div class="hidden error-message text-ln-danger-1 text-sm pl-7">
              Please confirm that you understand how your data will be used.
            </div>
          </div>

          <div class="flex justify-end">
            <button
              type="submit"
              id="submit-button"
              class="px-6 py-2 bg-icn-primary-1 hover:bg-icn-primary-2 text-ln-light-1 hover:text-ln-light-2 rounded transition-colors"
            >
              Send Message
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</BaseLayout>

<script>
  // Validate individual field
  function validateField(input: HTMLInputElement | HTMLTextAreaElement) {
    const errorMessage = input.nextElementSibling;

    if (input.type === "checkbox") {
      input = input as HTMLInputElement; // Ensure input is treated as checkbox
      // Find the error message that's within the same parent container
      const parentContainer = input.closest(".space-y-2");
      const checkboxError = parentContainer?.querySelector(".error-message");

      if (!input.checkValidity()) {
        if (checkboxError) {
          checkboxError.classList.remove("hidden");
          input.classList.add(
            "border-ln-danger-1",
            "ring-1",
            "ring-ln-danger-1"
          );
        }
        return false;
      } else {
        if (checkboxError) {
          checkboxError.classList.add("hidden");
          input.classList.remove(
            "border-ln-danger-1",
            "ring-1",
            "ring-ln-danger-1"
          );
        }
        return true;
      }
    }

    if (!input.checkValidity()) {
      if (errorMessage && errorMessage.classList.contains("error-message")) {
        errorMessage.classList.remove("hidden");
        input.classList.add("border-ln-danger-1", "ring-1", "ring-ln-danger-1");
      }
      return false;
    } else {
      if (errorMessage && errorMessage.classList.contains("error-message")) {
        errorMessage.classList.add("hidden");
        input.classList.remove(
          "border-ln-danger-1",
          "ring-1",
          "ring-ln-danger-1"
        );
      }
      return true;
    }
  }
  // Form validation and submission script
  function initializeContactForm() {
    let form = document.getElementById(
      "contact-form"
    ) as HTMLFormElement | null;
    const submitButton = document.getElementById(
      "submit-button"
    ) as HTMLButtonElement | null;
    const successMessage = document.getElementById("success-message");
    const errorMessage = document.getElementById("error-message");
    const errorDetails = document.getElementById("error-details");
    const closeErrorButton = document.getElementById("close-error");
    const closeError = () => {
      if (errorMessage) errorMessage.classList.add("hidden");
    };
    // Close error message on button click
    closeErrorButton?.addEventListener("click", closeError);

    // Exit if form not found
    if (!form || !submitButton) {
      return;
    }
    const clone = form.cloneNode(true) as HTMLFormElement;
    if (form.parentNode) {
      form.parentNode.replaceChild(clone, form);
    }
    form = clone;
    if (!form) {
      console.error("Failed to clone contact form");
      return;
    }

    // Get all required inputs
    const inputElements = form.querySelectorAll<
      HTMLInputElement | HTMLTextAreaElement
    >("input[required], textarea[required]");

    // Reset form state
    form.reset();
    successMessage?.classList.add("hidden");
    errorMessage?.classList.add("hidden");

    // Validate all fields and return result
    function validateForm() {
      let isValid = true;

      inputElements.forEach((input) => {
        if (!validateField(input)) {
          isValid = false;
        }
      });

      return isValid;
    }

    // Handle form submission
    form.addEventListener("submit", async (event) => {
      event.preventDefault();

      console.log("Form submitted");
      // Validate all fields
      if (!validateForm()) return;

      // Show loading state
      submitButton.disabled = true;
      submitButton.textContent = "Sending...";

      try {
        const formData = new FormData(form);
        const data = {
          name: formData.get("name"),
          email: formData.get("email"),
          message: formData.get("message"),
        };

        const response = await fetch("/api/contact/", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(data),
        });

        if (!response.ok) {
          throw new Error(
            `Server responded with ${response.status}: ${response.statusText}`
          );
        }

        const result = await response.json();

        if (result.success) {
          // Show success message
          if (successMessage) successMessage.classList.remove("hidden");
          // Hide form
          form.classList.add("hidden");
        } else {
          // Show error with details
          if (errorMessage) errorMessage.classList.remove("hidden");
          if (errorDetails && result.message) {
            errorDetails.textContent = result.message;
          }
        }
      } catch (error) {
        console.error("Error submitting form:", error);
        if (errorMessage) errorMessage.classList.remove("hidden");
        if (errorDetails) {
          errorDetails.textContent =
            error instanceof Error
              ? error.message
              : "An unexpected error occurred. Please try again later.";
        }
      } finally {
        // Reset button state
        submitButton.disabled = false;
        submitButton.textContent = "Send Message";
      }
    });

    // Add live validation as user types
    inputElements.forEach((input) => {
      input.addEventListener("blur", () => validateField(input));
      input.addEventListener("input", () => {
        if (input.classList.contains("border-ln-danger-1")) {
          validateField(input);
        }
      });
    });
  }

  // clean up the contact form before page changes
  function cleanupContactForm() {
    const form = document.getElementById("contact-form");
    if (form) {
      form.removeEventListener("submit", initializeContactForm);
      const inputElements = form.querySelectorAll(
        "input[required], textarea[required]"
      );
      inputElements.forEach((input) => {
        // Use anonymous functions that match how the listeners were added
        input.removeEventListener("blur", () => {});
        input.removeEventListener("input", () => {});
      });
    }
  }

  // Initialize on page load and after client-side navigation
  document.addEventListener("DOMContentLoaded", initializeContactForm);
  document.addEventListener("astro:page-load", initializeContactForm);

  document.addEventListener("astro:before-swap", cleanupContactForm);
</script>
