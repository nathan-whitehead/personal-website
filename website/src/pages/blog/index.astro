---
import BaseLayout from "@layouts/base.astro";
import { getCollection } from "astro:content";

// Get all blog posts
const allPosts = await getCollection("blog");

// Sort posts by date in descending order
const sortedPosts = allPosts.sort(
  (a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
);

// Get recent posts (limit to 5)
const recentPosts = sortedPosts.slice(0, 5);

// Get categories with post counts
const categories = Array.from(
  new Set(allPosts.map((post) => post.data.category))
)
  .map((category) => {
    return {
      name: category,
      slug: category.toLowerCase().replace(/\s+/g, "-"),
      posts: allPosts.filter((post) => post.data.category === category),
    };
  })
  .sort((a, b) => b.posts.length - a.posts.length);

// Format date helper function
function formatDate(dateString: Date | string) {
  return new Date(dateString).toLocaleDateString("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
  });
}
---

<BaseLayout title="Blog | Nathan's Website" description="Nathan's blog posts">
  <div class="container max-w-4xl mx-auto px-4 py-8">
    <div class="blog-article-content">
      <h1 class="text-4xl font-sans mb-4">Blog</h1>
      <p class="mb-8">
        Welcome to my blog! Here, I share my thoughts on technology,
        programming, and other topics that interest me.
      </p>

      <div class="blog-search font-sans mb-8">
        <input
          type="text"
          id="searchInput"
          placeholder="Search blog posts..."
          aria-label="Search blog posts"
          class="w-full p-2 border rounded bg-stone-50 dark:bg-zinc-700 dark:border-zinc-700"
        />
        <div
          id="searchResults"
          class="search-results hidden mt-2 bg-paper-100 dark:bg-zinc-800 border border-paper-300 dark:border-zinc-700 rounded shadow-md p-2"
        >
        </div>
      </div>

      <h2
        class="text-2xl font-sans mb-4 border-b border-paper-300 dark:border-zinc-700 pb-2"
      >
        Categories
      </h2>
      <ul class="categories-list mb-8 space-y-1">
        {
          categories.map((category) => (
            <li class="flex justify-between">
              <a
                href={`/blog/category/${category.slug}/`}
                class="hover:text-primary"
              >
                {category.name}
              </a>
              <span class="post-count text-paper-700 dark:text-stone-400">
                ({category.posts.length} posts)
              </span>
            </li>
          ))
        }
      </ul>

      <h2
        class="text-2xl font-sans mb-4 border-b border-paper-300 dark:border-zinc-700 pb-2"
      >
        Recent Posts
      </h2>
      <ul class="posts-list space-y-3">
        {
          recentPosts.map((post) => (
            <li class="flex flex-col sm:flex-row sm:justify-between pb-2 border-b border-paper-200 dark:border-zinc-800">
              <a
                href={`/blog/${post.slug}/`}
                class="hover:text-primary font-medium"
              >
                {post.data.title}
              </a>
              <span class="post-date text-paper-700 dark:text-stone-400 text-sm">
                {formatDate(post.data.date)}
              </span>
            </li>
          ))
        }
      </ul>

      <div class="mt-8 text-center">
        <a
          href="/blog/all/"
          class="inline-block px-4 py-2 bg-primary text-white font-medium rounded hover:bg-primary-600 transition-colors"
        >
          View All Posts
        </a>
      </div>
    </div>
  </div>
</BaseLayout>

<script>
  interface SearchItem {
    title: string;
    content: string;
    category: string;
    url: string;
    date: string;
  }

  let searchIndex: SearchItem[] = [];

  // load the search index from the API
  function loadSearchIndex() {
    fetch("/blog/search-index.json")
      .then((response) => response.json())
      .then((data) => {
        searchIndex = data;
      })
      .catch((error) => console.error("Error loading search index:", error));
  }
  // handle clicks outside the search results to close them
  function handleClickOutside(event: MouseEvent) {
    const searchInput = document.getElementById("searchInput");
    const searchResults = document.getElementById("searchResults");
    if (
      searchInput &&
      searchResults &&
      !searchInput.contains(event.target as Node) &&
      !searchResults.contains(event.target as Node)
    ) {
      searchResults.classList.add("hidden");
    }
  }
  // handle search input changes
  function handleSearchInput(event: Event) {
    const target = event.target as HTMLInputElement;
    const query = target.value.toLowerCase().trim();
    const searchResults = document.getElementById("searchResults");
    if (!query || !searchResults) {
      // searchResults.innerHTML = "";
      // searchResults.classList.add("hidden");
      return;
    }
    // Filter posts that match the query
    const results = searchIndex
      .filter((post) => {
        return (
          post.title.toLowerCase().includes(query) ||
          post.content.toLowerCase().includes(query) ||
          post.category.toLowerCase().includes(query)
        );
      })
      .slice(0, 5); // Limit to 5 results

    // Display results
    if (results.length > 0) {
      searchResults.innerHTML =
        '<ul class="space-y-2">' +
        results
          .map(
            (post) => `
            <li class="pb-2 border-b border-paper-200 dark:border-zinc-700 last:border-b-0">
              <a href="${post.url}" class="hover:text-primary block font-medium">${post.title}</a>
              <span class="post-date text-paper-700 dark:text-paper-400 text-sm">${post.date}</span>
            </li>
          `
          )
          .join("") +
        "</ul>";
      searchResults.classList.remove("hidden");
    } else {
      searchResults.innerHTML =
        '<p class="text-center text-paper-700 dark:text-paper-400">No results found</p>';
      searchResults.classList.remove("hidden");
    }
  }
  // clean function to remove listeners before page changes
  function cleanupSearch() {
    const searchInput = document.getElementById("searchInput");
    if (searchInput) {
      searchInput.removeEventListener("input", handleSearchInput);
    }
    document.removeEventListener("click", handleClickOutside);
  }
  // initialize search functionality on page load/transition
  function initializeSearch() {
    const searchInput = document.getElementById("searchInput");
    const searchResults = document.getElementById("searchResults");

    if (!searchInput || !searchResults) return;

    searchInput.addEventListener("input", handleSearchInput);
    document.addEventListener("click", handleClickOutside);

    loadSearchIndex();
  }

  document.addEventListener("astro:page-load", initializeSearch);
  document.addEventListener("astro:before-swap", cleanupSearch);
  document.addEventListener("astro:page-load", initializeSearch);

  // document.addEventListener("DOMContentLoaded", function () {
  //   const searchInput = document.getElementById("searchInput");
  //   const searchResults = document.getElementById("searchResults");

  //   interface SearchItem {
  //     title: string;
  //     content: string;
  //     category: string;
  //     url: string;
  //     date: string;
  //   }

  //   let searchIndex: SearchItem[] = [];

  //   // Fetch the search index
  //   fetch("/api/blog/search-index.json")
  //     .then((response) => response.json())
  //     .then((data) => {
  //       searchIndex = data;
  //     })
  //     .catch((error) => console.error("Error loading search index:", error));

  //   // Handle search input
  //   searchInput?.addEventListener("input", function (this: HTMLInputElement) {
  //     const query = this.value.toLowerCase().trim();

  //     // Clear results if query is empty
  //     if (!query || !searchResults) {
  //       if (searchResults) {
  //         searchResults.innerHTML = "";
  //         searchResults.classList.add("hidden");
  //       }
  //       return;
  //     }

  //     // Filter posts that match the query
  //     const results = searchIndex
  //       .filter((post) => {
  //         return (
  //           post.title.toLowerCase().includes(query) ||
  //           post.content.toLowerCase().includes(query) ||
  //           post.category.toLowerCase().includes(query)
  //         );
  //       })
  //       .slice(0, 5); // Limit to 5 results

  //     // Display results
  //     if (results.length > 0) {
  //       searchResults.innerHTML =
  //         '<ul class="space-y-2">' +
  //         results
  //           .map(
  //             (post) => `
  //           <li class="pb-2 border-b border-paper-200 dark:border-zinc-700 last:border-b-0">
  //             <a href="${post.url}" class="hover:text-primary block font-medium">${post.title}</a>
  //             <span class="post-date text-paper-700 dark:text-paper-400 text-sm">${post.date}</span>
  //           </li>
  //         `
  //           )
  //           .join("") +
  //         "</ul>";
  //       searchResults.classList.remove("hidden");
  //     } else {
  //       searchResults.innerHTML =
  //         '<p class="text-center text-paper-700 dark:text-paper-400">No results found</p>';
  //       searchResults.classList.remove("hidden");
  //     }
  //   });

  //   // Close search results when clicking outside
  //   document.addEventListener("click", function (e) {
  //     if (
  //       e.target !== searchInput &&
  //       e.target !== searchResults &&
  //       searchResults
  //     ) {
  //       searchResults.classList.add("hidden");
  //     }
  //   });
  // });
</script>
